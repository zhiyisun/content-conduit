import logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
import subprocess
from src.content_config import ContentConfig
import os

class AIReporter:
    def __init__(self, config_path: str):
        self.config = ContentConfig(config_path)

    def _is_proxy_reachable(self, host: str, port: int, timeout: float = 2.0) -> bool:
        import socket
        try:
            with socket.create_connection((host, port), timeout=timeout):
                return True
        except Exception:
            return False

    def generate_report(self, logical_name: str, article_filepath: str, html_filepath: str):
        prompt = self.config.get_prompt(logical_name)
        if not prompt:
            msg = f"Error: No prompt for logical name: {logical_name}"
            logging.error(msg)
            return msg
        # Build prompt with actual file paths
        prompt_text = '\n'.join(prompt) if isinstance(prompt, list) else str(prompt)
        prompt_text += f"\nThe article to read is located at: {article_filepath}\nPlease generate a well-formatted HTML article and save it to: {html_filepath}"

        # Load tool and proxy settings from config.json
        import json
        config_json_path = os.path.join(os.path.dirname(__file__), '../config.json')
        with open(config_json_path, 'r', encoding='utf-8') as cf:
            config_data = json.load(cf)
        tool = config_data.get("TOOL", "qwen").lower()
        use_proxy_config = config_data.get("USE_PROXY", False)
        proxy_host = config_data.get("PROXY_HOST", "localhost")
        proxy_port = int(config_data.get("PROXY_PORT", 7893))
        use_proxy = use_proxy_config and tool == "gemini" and self._is_proxy_reachable(proxy_host, proxy_port)

        try:
            # Use 'nvm which current' to find the path of the active Node.js binary.
            # We must run this through a shell because 'nvm' is a shell function.
            nvm_bin_command = "nvm which current"
            # Source nvm.sh to make the 'nvm' command available.
            nvm_init_command = "export NVM_DIR=\"$HOME/.nvm\" && [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\""
            full_command = f"{nvm_init_command} && {nvm_bin_command}"

            # Run the combined command using /bin/bash to ensure shell functions work.
            result = subprocess.run(
                ["/bin/bash", "-c", full_command], 
                capture_output=True, 
                text=True, 
                check=True
            )
            node_path = result.stdout.strip()
            nvm_bin_path = os.path.dirname(node_path)
            env_with_node = os.environ.copy()
            env_with_node["PATH"] = f"{nvm_bin_path}:{env_with_node['PATH']}"

            cmd = [tool]
            if use_proxy:
                cmd += ["--proxy", f"http://{proxy_host}:{proxy_port}"]
            cmd += ["--yolo", "-p", f"{prompt_text}"]

            result = subprocess.run(cmd, capture_output=True, text=True, env=env_with_node)
            if result.returncode != 0:
                msg = f"Error: AI tool command failed (return code: {result.returncode})\n{result.stderr}"
                logging.error(msg)
                return msg
            return result.stdout

        except subprocess.CalledProcessError as e:
            msg = f"Error: AI tool command failed (return code: {e.returncode})\n{e.stderr}"
            logging.error(msg)
            return msg
        except Exception as e:
            msg = f"Error: Unexpected error in AIReporter: {e}"
            logging.error(msg)
            return msg


# Example usage
if __name__ == "__main__":
    config_path = os.path.join(os.path.dirname(__file__), '../content_map.json')
    article_filepath = '/path/to/article.txt'  # Replace with actual path
    html_filepath = '/path/to/output.html'     # Replace with actual path
    reporter = AIReporter(config_path)
    report = reporter.generate_report('smol_news', article_filepath, html_filepath)
    logging.info(f"Report generated by AI tool:\n{report}")
